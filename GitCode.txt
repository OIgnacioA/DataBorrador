1- git init
2- git status -s
3- git add .
4- git commit -m"name"

* --> git commit -am "x" : agrega y sube
*
*git log --oneline   : ver copias ne repositorio remoto
*

5- git remote add origin -url- .git

----Si ya hay una RAMA en el repositorio;


*  git push origin master (empuja a rama maestra*) 
*-->already exist?: then. 
6- git push origin master 

*  git push -u origin main (sincronizacion de local con remoto)
*  git push origin (-por defecto empuja la rama actual a una rama coincidente del mismo nombre, pero este            comportamiento se puede anular a través de git config) 

*
* git pull origin master ( trae cambios relizados en el archivo en github a local. )git pull + apodo de repositorio + nombre de rama
*


-----------------------------------------------------------

---- Clonacion: 


- Bash en Carpeta nueva. : git clone -url- 
- Actualizar. 
- $ git branch -a  (ver los branchs remotos- y a partir de ahi, elegir uno con checkout
          , para verlos en la clonacion por ejemplo, porque al clonar al principio no aparecen)
$ git checkout (tambien sirve para esto ultimo) 


      ----a un commit particular: 
      
      git clone https://github.com/usuario/my-repo-name.git 
   
      git checkout [Hash del commit que quieres](el numero largo del commit)
      
      No olvidar el punto al final.(en github)  También puedes descartar cambios mediante reset pasándole el numero de commits. Por ejemplo, para descartar los últimos         3 commits:

      git reset --hard HEAD~3
      
      
      ------Para ver todos los commits en tu maquina puedes usar git log:

          git log
          
      ejemplo Si queres ver los ultimos n commits (donde "n" es la cantidad de commits que quieres ver), suponiendo que quiero ver los ultimos 5:

          git log -5
     
-----------------------------------------------------------

------TAGS : 
7- git tag DD/MM/AAAA -m"name"
8- git push --tags
*

----------------------------------------------------------

  ------ BRANCH: 
  
9-  git branch Nombre (crear) 
10- git branch     (mostrar) 
11 - git branch -m "ejemplorenombrado" (renombrar)
12- git checkout -which?

----------
 ------borrar branch 
       git Brang -d {nombre del branch} local
       git branch -D {nombre del branch} local y remoto

---------------------------------------------------------- cerrar un proceso.

----"Another git process seems to be running and thus cant commit"




I met this problem recently too.

          rm -f ./.git/index.lock


try this commend in your git bash, then you can solve your problem.


------------------------------------------------------------

Para borrar los últimos 3 commits que ya has enviado a GitHub, puedes seguir estos pasos:

Abre la consola o terminal y navega hasta el directorio raíz de tu repositorio local.

Asegúrate de estar en la rama correcta donde se encuentran los commits que deseas borrar.

Utiliza el comando git log para obtener una lista de los últimos commits en el historial. Toma nota de los identificadores de los 3 commits más recientes que deseas borrar.

Utiliza el comando git reset seguido de los identificadores de los 3 commits que deseas borrar para retroceder en el historial de commits. Por ejemplo, si los identificadores de los 3 commits que deseas borrar son "abc123", "def456" y "ghi789", utiliza el siguiente comando:

git reset --hard HEAD~3

Una vez que hayas utilizado este comando, los últimos 3 commits se habrán eliminado del historial de commits y los cambios realizados en ellos también se eliminarán del área de trabajo y del directorio de trabajo.

Finalmente, utiliza el comando git push --force para actualizar el repositorio remoto y eliminar los commits eliminados del historial de commits remoto. Ten en cuenta que este comando fuerza la actualización del historial de commits remoto, por lo que otros colaboradores del repositorio podrían tener problemas de integración si ya han descargado los commits eliminados. Si estás trabajando solo en el proyecto, esto no debería ser un problema.

Es importante tener en cuenta que el uso de git reset --hard elimina los cambios realizados en los commits que se eliminan, por lo que deberás asegurarte de haber guardado cualquier cambio importante antes de utilizar este comando.

